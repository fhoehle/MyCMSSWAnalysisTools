#!/usr/bin/env python
import sys,copy,subprocess,os
args = sys.argv[1:]
if len(args) < 2:
  sys.exit("at least target and one input must be defined")
target=args.pop(0)
inputFiles=copy.deepcopy(args)
if len(args) == 1 and not args[0].endswith('.root'):
  print "using fileList"
  inputFiles = [ l.strip() for l in open(args[0]) if not l.strip().startswith('#') ]
#print inputFiles
#
#allArgs=("$@")
##echo ${allArgs[@]}
#target=${allArgs[0]}
#echo "target "$target
#files=(${allArgs[@]:1})
#if [ -f $PWD"/"$target ] ; then
#   echo "$target already exists"
#   exit 1 
#fi
##echo "files "${files[@]}
def executeCommandSameEnv(command):
 import os,subprocess
 return subprocess.Popen([command],bufsize=1 , stdin=open(os.devnull),shell=True,stdout=subprocess.PIPE,env=os.environ)
chunkSize=3
noFiles=len(inputFiles)
mergeSteps=noFiles/chunkSize+1
print "mergeSteps ",mergeSteps
targetTmpOld="";targetTmp="";targetTmpPattern=target+"_tmp"
for i in range( mergeSteps):
  print "merging ",i
  targetTmpOld=targetTmp
  targetTmp=targetTmpPattern+str(i)
  haddArgs=""
  inputFileList = inputFiles[ chunkSize*i : (chunkSize*(i+1) if len(inputFiles) > chunkSize*(i+1) else len(inputFiles) )]
  print "targetTmpOld ", targetTmpOld , "  targetTmp ",targetTmp 
  if i == mergeSteps-1 :
    haddArgs=target+" "+" ".join(inputFileList)+" "+targetTmpOld
  else:
    haddArgs=targetTmp+" "+" ".join(inputFileList)+" "+targetTmpOld
  print haddArgs
  sP = subprocess.Popen(["hadd "+haddArgs],bufsize=1 , stdin=open(os.devnull),shell=True,stdout=subprocess.PIPE,env=os.environ)
  sP.wait()
  if sP.returncode != 0:
    print sP.communicate()[0]
    sys.exit(sP.returncode) 
if mergeSteps > 1:
  sP = subprocess.Popen(["rm "+targetTmpPattern+"*"],bufsize=1 , stdin=open(os.devnull),shell=True,stdout=subprocess.PIPE,env=os.environ)
  sP.wait()
  print sP.communicate()[0]
  sys.exit(sP.returncode)
